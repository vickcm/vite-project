 <template>
  <main>

    <div class="mb-3 col-span-1">
      <form action="#" method="post" id="form-message" @submit.prevent="sendPrivateMessages">
        <div class="mb-2">
          <div>
            Usuario:
            <span class="text-xs text-mylogo bg-slate-600 px-2 py-1 rounded">{{ user.email }}</span>
          </div>
        </div>
        <div class="mb-2">
          <CompLabel for="mensaje">Mensaje</CompLabel>
          <CompTextarea id="mensaje" v-model="form.mensaje" class="w-full px-2 py-1"></CompTextarea>
        </div>
        <CompButton class="px-4 py-2">Enviar</CompButton>
      </form>

      <CompLoading v-if="formLoading"></CompLoading>

      <h2 class="mb-3 text-2xl" v-if="toUser">Iniciando Chat con Asesor Disponible: {{ advisorName }}</h2>

    </div>

    <div v-if="loaded && messages.length > 0">
      <h3>Mensajes:</h3>
      <ul>
        <li v-for="message in messages" :key="message.created_at">
          <span class="font-bold">{{ message.user }}</span>: {{ message.message }}
          {{ dateToString(message.created_at) }}
        </li>
      </ul>
    </div>

    <CompLoading v-if="!loaded"></CompLoading>
  </main>
</template>

<script>
import CompLoading from "../components/CompLoading.vue";
import CompLabel from "../components/CompLabel.vue";
import CompInput from "../components/CompInput.vue";
import CompTextarea from "../components/CompTextarea.vue";
import CompButton from "../components/CompButton.vue";
import { subscribeAuth } from '../services/auth';
import { sendPrivateMessages, subscribeToPrivateChat } from '../services/privateChats.js';
import { getUserById } from "../services/users";
import { dateToString } from "../helpers/date.js";

export default {
  name: "ChatPrivado",



  components: { CompLoading, CompLabel, CompInput, CompTextarea, CompButton },

  data() {
    return {
      form: {
        mensaje: '',
      },
      formLoading: false,
      user: {
        id: null,
        email: null,
      },
      toUser: null,
      messages: [],
      loaded: false,
      advisorName: "",
    };
  },

  mounted() {
    subscribeAuth(newUser => this.user = newUser);
    this.subscribeToMessages();
    this.getUserById();

  },

  methods: {
    async sendPrivateMessages() {
      this.formLoading = true;

      const from = this.user.id;
      const toUser = this.$route.params.id;
      const message = this.form.mensaje;


      await sendPrivateMessages(from, toUser, message)
        .then(() => {
          this.formLoading = false;
          this.form.mensaje = '';
        });
    },

    subscribeToMessages() {
      const from = this.user.id;
      const toUser = this.$route.params.id;
      subscribeToPrivateChat(from, toUser, (messages) => {
        this.messages = messages;
        console.log('Mensajes:', this.messages);
        this.loaded = true; // Marcar los mensajes como cargados
      });
    },

    async getUserById() {
      const id = this.$route.params.id;
      const toUser = await getUserById(id);
      this.advisorName = toUser.username; // O cualquier propiedad que contenga el nombre del asesor

      console.log(toUser);
    },

    dateToString(date) {
      return dateToString(date);
    }
  },
};
</script>